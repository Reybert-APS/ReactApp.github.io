{"version":3,"sources":["components/UserTable.jsx","components/AddUserForm.jsx","components/EditUserForm.jsx","App.js","serviceWorker.js","index.js"],"names":["UserTable","React","useState","equipo","setEquipo","id","data","useEffect","obtenerDatos","a","fetch","json","users","map","item","key","identificacion","nombre","curso","nota1","nota2","nota3","onClick","method","headers","body","JSON","stringify","catch","err","console","log","window","location","href","className","AddUserForm","props","setdata","handle","e","newData","target","value","onSubmit","preventDefault","Axios","post","then","res","alert","submit","for","onChange","type","name","placeholder","EditUserForm","useForm","defaultValues","currentUser","register","errors","handleSubmit","setValue","username","updateUser","reset","ref","required","message","App","setUsers","editing","setEditing","setCurrentUser","user","addUser","uuidv4","deleteUser","filter","editRow","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.4736e4fe.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst UserTable = () => {\r\n  const url = 'https://herokuphpapirest.herokuapp.com/delete.php';\r\n\r\n  const [equipo, setEquipo] = React.useState([]);\r\n  const [data, setdata] = useState({\r\n    id: '',\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    obtenerDatos();\r\n  }, []);\r\n\r\n  const obtenerDatos = async () => {\r\n    const data = await fetch('https://herokuphpapirest.herokuapp.com/read.php');\r\n    const users = await data.json();\r\n    setEquipo(users);\r\n  };\r\n  function submit(id) {\r\n    debugger;\r\n\r\n    data.id = id;\r\n\r\n    fetch(url, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8 ',\r\n      },\r\n      body: JSON.stringify(data),\r\n    }).catch((err) => console.log(err));\r\n    window.location.href = window.location.href;\r\n  }\r\n  return (\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>identificacion</th>\r\n          <th>Nombre</th>\r\n          <th>Curso</th>\r\n          <th>nota1</th>\r\n          <th>nota2</th>\r\n          <th>nota3</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {equipo.map((item) => (\r\n          <tr key={item.id}>\r\n            <td>{item.identificacion}</td>\r\n            <td>{item.nombre}</td>\r\n            <td>{item.curso}</td>\r\n            <td>{item.nota1}</td>\r\n            <td>{item.nota2}</td>\r\n            <td>{item.nota3}</td>\r\n            <td>\r\n              <button\r\n                onClick={() => submit(item.id)}\r\n                className=\"button muted-button\"\r\n              >\r\n                Eliminar\r\n              </button>\r\n            </td>\r\n            <td>\r\n              <button className=\"button muted-button\">Editar</button>\r\n            </td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default UserTable;\r\n","import React, { useState } from 'react';\r\nimport Axios from 'axios';\r\n\r\nexport default function AddUserForm(props) {\r\n  const url = 'https://herokuphpapirest.herokuapp.com/insert.php';\r\n\r\n  const [data, setdata] = useState({\r\n    nombre: '',\r\n    identificacion: '',\r\n    curso: '',\r\n    nota1: '',\r\n    nota2: '',\r\n    nota3: '',\r\n  });\r\n\r\n  function submit(e) {\r\n    debugger;\r\n    e.preventDefault();\r\n    Axios.post(url, JSON.stringify(data)).then((res) => {\r\n      res.data = data;\r\n      alert('agregado correctamente ', data);\r\n\r\n      //  fetch(Url, {\r\n      //     method: 'POST', // or 'PUT'\r\n      //     body: JSON.stringify(data), // data can be `string` or {object}!\r\n      //     headers:{\r\n      //       'Content-Type': 'application/json'\r\n      //     }\r\n      //   }).then(res => res.json())\r\n      //   .catch(error => console.error('Error:', error))\r\n      //   .then(response => console.log('Success:', response));\r\n    });\r\n    window.location.href = window.location.href;\r\n  }\r\n\r\n  function handle(e) {\r\n    const newData = { ...data };\r\n    newData[e.target.id] = e.target.value;\r\n    setdata(newData);\r\n  }\r\n  return (\r\n    <div className=\"container mr-0\">\r\n      <h1> Agregar Empleado</h1>\r\n      <hr />\r\n      <br />\r\n      <form onSubmit={(e) => submit(e)}>\r\n        <div className=\"form-group\">\r\n          <label for=\"nombre\">Nombre</label>\r\n          <input\r\n            onChange={(e) => handle(e)}\r\n            value={data.nombre}\r\n            type=\"text\"\r\n            name=\"nombre\"\r\n            className={`form-control is-valid`}\r\n            id=\"nombre\"\r\n            placeholder=\"nombre\"\r\n          />\r\n          <label for=\"apellido\">Identificacion</label>\r\n          <input\r\n            onChange={(e) => handle(e)}\r\n            value={data.identificacion}\r\n            type=\"text\"\r\n            name=\"identificacion\"\r\n            className=\"form-control is-valid\"\r\n            id=\"identificacion\"\r\n            placeholder=\"identificacion\"\r\n          />\r\n          <label for=\"identificacion\">curso</label>\r\n          <input\r\n            onChange={(e) => handle(e)}\r\n            value={data.curso}\r\n            type=\"text\"\r\n            name=\"curso\"\r\n            className=\"form-control is-valid\"\r\n            id=\"curso\"\r\n            placeholder=\"curso\"\r\n          />\r\n          <label for=\"correo\">Nota 01</label>\r\n          <input\r\n            onChange={(e) => handle(e)}\r\n            value={data.nota1}\r\n            type=\"text\"\r\n            name=\"nota1\"\r\n            className=\"form-control data.noombre != is-valid \"\r\n            id=\"nota1\"\r\n            placeholder=\"nota1\"\r\n          />\r\n          <label for=\"correo\">Nota 02</label>\r\n          <input\r\n            onChange={(e) => handle(e)}\r\n            value={data.nota2}\r\n            type=\"text\"\r\n            name=\"nota2\"\r\n            className=\"form-control data.noombre != is-valid \"\r\n            id=\"nota2\"\r\n            placeholder=\"nota2\"\r\n          />\r\n          <label for=\"correo\">Nota 03</label>\r\n          <input\r\n            onChange={(e) => handle(e)}\r\n            value={data.nota3}\r\n            type=\"text\"\r\n            name=\"nota3\"\r\n            className=\"form-control data.noombre != is-valid \"\r\n            id=\"nota3\"\r\n            placeholder=\"nota3\"\r\n          />\r\n        </div>\r\n\r\n        <button type=\"submit\" className=\"btn btn-success\">\r\n          Agregar\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport {useForm} from 'react-hook-form'\r\n\r\nconst EditUserForm = (props) => {\r\n\r\n    // console.log(props.currentUser)\r\n\r\n    const {register, errors, handleSubmit, setValue } = useForm({\r\n        defaultValues: props.currentUser\r\n    });\r\n\r\n    setValue('name', props.currentUser.name);\r\n    setValue('username', props.currentUser.username);\r\n\r\n    const onSubmit = (data,e) => {\r\n        console.log(data)\r\n        data.id= props.currentUser.id\r\n\r\n        props.updateUser(props.currentUser.id, data)\r\n\r\n        // limpiar campos\r\n        e.target.reset();\r\n    }\r\n\r\n    return(\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <label>Nombre</label>\r\n            <input type=\"text\" name=\"name\" ref={\r\n                register({\r\n                    required: {value:true, message:'Campo requerido'}\r\n                })\r\n            }/>\r\n            <div>{errors?.name?.message}</div>\r\n\r\n            <label>Nombre de usuario</label>\r\n            <input type=\"text\" name=\"curso\" ref={\r\n                register({\r\n                    required: {value:true, message:'Campo requerido'}\r\n                })\r\n            }/>\r\n            <div>{errors?.username?.message}</div>\r\n            <button>Editar usuario</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default EditUserForm;","import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport UserTable from './components/UserTable';\nimport AddUserForm from './components/AddUserForm';\nimport EditUserForm from './components/EditUserForm';\n\nfunction App() {\n  const usersData = [];\n\n  //state\n  const [users, setUsers] = useState(usersData);\n\n  //agregar usuarios\n  const addUser = (user) => {\n    user.id = uuidv4();\n    setUsers([...users, user]);\n  };\n\n  //eliminar usuarios\n  const deleteUser = (id) => {\n    setUsers(users.filter((user) => user.id !== id));\n  };\n\n  //editar usuario\n  const [editing, setEditing] = useState(false);\n\n  const [currentUser, setCurrentUser] = useState({\n    id: null,\n    name: '',\n    curso: '',\n    identificacion: '',\n    nota1: '',\n    nota2: '',\n    nota3: '',\n  });\n\n  const editRow = (user) => {\n    setEditing(true);\n    setCurrentUser({\n      id: user.id,\n      name: user.name,\n      curso: user.curso,\n      identificacion: user.identificacion,\n      nota1: user.nota1,\n      nota2: user.nota2,\n      nota3: user.nota3,\n    });\n  };\n\n  const updateUser = (id, updateUser) => {\n    setEditing(false);\n    setUsers(users.map((user) => (user.id === id ? updateUser : user)));\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Registro de estudiantes aplicando Hooks</h1>\n      <hr></hr>\n      <div className=\"flex-row\">\n        <div className=\"flex-large\">\n          {editing ? (\n            <div>\n              <h2>Editar usuario</h2>\n              <EditUserForm currentUser={currentUser} updateUser={updateUser} />\n            </div>\n          ) : (\n            <div>\n              <h2>Agregar usuario nuevo</h2>\n              <AddUserForm addUser={addUser} />\n            </div>\n          )}\n        </div>\n        <div className=\"flex-large\">\n          <h2>Visualizar usuarios</h2>\n          <UserTable users={users} deleteUser={deleteUser} editRow={editRow} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}